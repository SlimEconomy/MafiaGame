{"version":3,"sources":["Images/notfound.png","Images sync /^/.*/.png$","Images/mafia.png","Components/Input.tsx","Components/Participant.tsx","Components/Participants.tsx","Shuffle.ts","AssignRoles.ts","Components/StartGame.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Input","add","label","labelColor","useState","inputValue","setInputValue","className","style","backgroundColor","type","value","onChange","target","onClick","alert","Participant","participant","deleteFunction","role","bgImage","require","toLowerCase","err","backgroundImage","Participants","participants","Array","isArray","key","Math","random","playerArray","newArray","player","push","shuffle","a","j","x","i","length","floor","assignRoles","players","roles","returnObject","console","log","StartGame","assignedRoles","setAssignedRoles","useEffect","index","indexOf","splice","App","setPlayers","setRoles","started","setStarted","toggleStart","startGame","filter","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07ca8b60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notfound.c511d864.png\";","var map = {\n\t\"./mafia.png\": 18,\n\t\"./notfound.png\": 6\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 17;","module.exports = __webpack_public_path__ + \"static/media/mafia.f6c60ed0.png\";","import React, { useState } from 'react'\r\n\r\ninterface Props {\r\n    add: (participant: string) => void;\r\n    label: string;\r\n    labelColor: string;\r\n}\r\n\r\nconst Input: React.FC<Props> = ({ add, label, labelColor }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const submit = (): void => {\r\n        if (!inputValue) return alert(\"Input field cannot be empty.\")\r\n        add(inputValue);\r\n        setInputValue(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <div style={{ backgroundColor: labelColor }}>{label}</div>\r\n            <input type=\"text\" value={inputValue} onChange={e => setInputValue(e.target.value)} />\r\n            <button onClick={submit}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport getImageOfRole from '../ImageOfRole'\r\n\r\ninterface Props {\r\n    participant: string,\r\n    deleteFunction: (participant: string, role?: string) => void;\r\n    role?: string\r\n}\r\n\r\nconst Participant: React.FC<Props> = ({ participant, deleteFunction, role }) => {\r\n    let bgImage: string = \"\";\r\n    if (role) {\r\n        try {\r\n            bgImage = require(`../Images/${role.toLowerCase()}.png`);\r\n        }\r\n        catch (err) {\r\n            //default case: notfound\r\n            bgImage = require(`../Images/notfound.png`);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"participant\" style={{ backgroundImage: bgImage ? `url(\"${bgImage}\")` : \"\" }}>\r\n            <h3>{participant}</h3>\r\n            <div onClick={() => deleteFunction(participant, role)}>\r\n                <i className=\"fas fa-trash\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participant\r\n","import React from 'react'\r\nimport Participant from './Participant'\r\nimport { LooseObject } from \"../AssignRoles\"\r\n\r\ninterface Props {\r\n    participants: Array<string> | LooseObject;\r\n    deleteFunction: (participant: string, role?: string) => void\r\n}\r\n\r\nconst Participants: React.FC<Props> = ({ participants, deleteFunction }) => {\r\n    return (\r\n        <div>\r\n            {!Array.isArray(participants) && typeof participants === \"object\" ? //if object\r\n                Object.keys(participants).map(key => {\r\n                    const playerArray: Array<string> = participants[key]\r\n                    const newArray: Array<JSX.Element> = []; //array of rendered components\r\n                    for (let player of playerArray) {\r\n                        newArray.push(<Participant key={key + player} participant={player} deleteFunction={deleteFunction} role={key} />)\r\n                    }\r\n                    return newArray;\r\n                })\r\n                : //if array\r\n                participants.map(participant => {\r\n                    return <Participant key={participant + Math.random()} participant={participant} deleteFunction={deleteFunction} />\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participants\r\n","/**\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n */\r\nfunction shuffle(a: any) {\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n}\r\n\r\nexport default shuffle;","export interface LooseObject {\r\n    [key: string]: Array<string>\r\n}\r\n\r\n/**\r\n * Assigns the roles and players into an object\r\n * @param {Array} players the participating players\r\n * @param {Array} roles the roles that need to be assigned to players\r\n * arrays have been already shuffled\r\n */\r\nconst assignRoles = (players: Array<string>, roles: Array<string>): LooseObject => {\r\n    let returnObject: LooseObject = {};\r\n    for (let i = 0; i < roles.length; i++) {\r\n        const role = roles[i];\r\n        const player = players[i];\r\n        returnObject[role] ? returnObject[role].push(player) : returnObject[role] = [player]; //push to role, if role exists already, else initialize it\r\n    }\r\n    console.log(returnObject)\r\n    return returnObject;\r\n}\r\n\r\nexport default assignRoles;","import React, { useState, useEffect } from 'react'\r\nimport shuffle from \"../Shuffle\"\r\nimport assignRoles from '../AssignRoles'\r\nimport Participant from './Participant'\r\nimport Participants from './Participants'\r\nimport { LooseObject } from \"../AssignRoles\"\r\n\r\ninterface Props {\r\n    startGame: () => void;\r\n    roles: Array<string>;\r\n    players: Array<string>;\r\n}\r\n\r\nconst StartGame: React.FC<Props> = ({ players, roles }) => {\r\n    const [assignedRoles, setAssignedRoles] = useState<LooseObject>({})\r\n\r\n    useEffect(() => {\r\n        shuffle(players);\r\n        shuffle(roles);\r\n        setAssignedRoles(assignRoles(players, roles))\r\n    }, [])\r\n\r\n    const deleteParticipant = (player: string, role?: string): void => { //delete a dead player from the game\r\n        if (role) {\r\n            const index = assignedRoles[role].indexOf(player); //get index of this player in the role array\r\n            if (index > -1) {\r\n                assignedRoles[role].splice(index, 1);\r\n            }\r\n            setAssignedRoles({ //to update state with spliced array\r\n                ...assignedRoles,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(assignedRoles).length !== 0 && <Participants deleteFunction={deleteParticipant} participants={assignedRoles} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartGame\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Input from './Components/Input';\nimport Participants from './Components/Participants';\nimport Participant from './Components/Participant';\nimport StartGame from './Components/StartGame';\n\n\nfunction App() {\n  const [players, setPlayers] = useState<string[]>([]);\n  const [roles, setRoles] = useState<string[]>([]);\n  const [started, setStarted] = useState(false);\n\n  const toggleStart = () => {\n    setStarted(!started);\n  }\n\n  const addPlayer = (participant: string) => {\n    if (players.includes(participant)) alert(\"Player already exists.\")\n    else setPlayers([...players, participant])\n  }\n\n  const addRole = (participant: string) => {\n    setRoles([...roles, participant])\n  }\n\n  const deleteRole = (participant: string) => {\n    setRoles(roles.filter(role => role !== participant))\n  }\n\n  const deletePlayer = (participant: string) => {\n    setPlayers(players.filter(player => player !== participant))\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>MafiaGame</h1>\n      {\n        started ?\n          <StartGame startGame={toggleStart} players={players} roles={roles} /> :\n          <>\n            <div className=\"inputs\">\n              <div className=\"roles participants\">\n                <Input label=\"Role\" add={addRole} labelColor=\"green\" />\n                <Participants participants={roles} deleteFunction={deleteRole} />\n              </div>\n              <div className=\"players participants\">\n                <Input label=\"Player\" add={addPlayer} labelColor=\"blue\" />\n                <Participants participants={players} deleteFunction={deletePlayer} />\n              </div>\n            </div>\n            <button onClick={toggleStart}>Start game</button>\n          </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}