{"version":3,"sources":["Components/Input.tsx","Components/Participant.tsx","Components/Participants.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","add","label","labelColor","useState","inputValue","setInputValue","className","style","backgroundColor","type","value","onChange","e","target","onClick","alert","Participant","participant","deleteFunction","Participants","participants","map","App","players","setPlayers","roles","setRoles","deleteRole","filter","role","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAyBeA,G,MAjBgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EACvBC,mBAAS,IADc,mBACpDC,EADoD,KACxCC,EADwC,KAQ3D,OACI,yBAAKC,UAAU,SACX,yBAAKC,MAAO,CAAEC,gBAAiBN,IAAeD,GAC9C,2BAAOQ,KAAK,OAAOC,MAAON,EAAYO,SAAU,SAAAC,GAAC,OAAIP,EAAcO,EAAEC,OAAOH,UAC5E,4BAAQI,QATD,WACNV,GAAYW,MAAM,gCACvBf,EAAII,KAOA,UCFGY,EAXsB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACjD,OACI,yBAAKZ,UAAU,eACX,4BAAKW,GACL,yBAAKH,QAAS,kBAAMI,EAAeD,KAC/B,uBAAGX,UAAU,oBCMda,EAVuB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aAAcF,EAAqB,EAArBA,eACnD,OACI,6BACKE,EAAaC,KAAI,SAAAJ,GACd,OAAO,kBAAC,EAAD,CAAaA,YAAaA,EAAaC,eAAgBA,SCkC/DI,MAvCf,WAAgB,IAAD,EACiBnB,mBAAmB,IADpC,mBACNoB,EADM,KACGC,EADH,OAEarB,mBAAmB,IAFhC,mBAENsB,EAFM,KAECC,EAFD,KAcPC,EAAa,SAACV,GAClBS,EAASD,EAAMG,QAAO,SAAAC,GAAI,OAAIA,IAASZ,OAOzC,OACE,yBAAKX,UAAU,OACb,qCACA,yBAAKA,UAAU,UACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAOL,MAAM,OAAOD,IAlBZ,SAACiB,GACXM,EAAQO,SAASb,GAAcF,MAAM,0BACpCW,EAAS,GAAD,mBAAKD,GAAL,CAAYR,MAgBef,WAAW,UAC7C,kBAAC,EAAD,CAAckB,aAAcK,EAAOP,eAAgBS,KAErD,yBAAKrB,UAAU,WACb,kBAAC,EAAD,CAAOL,MAAM,SAASD,IA3BZ,SAACiB,GACbM,EAAQO,SAASb,GAAcF,MAAM,0BACpCS,EAAW,GAAD,mBAAKD,GAAL,CAAcN,MAyBef,WAAW,SACjD,kBAAC,EAAD,CAAckB,aAAcG,EAASL,eAAgBS,QC3B3CI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.10bff02f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\ninterface Props {\r\n    add: (participant: string) => void;\r\n    label: string;\r\n    labelColor: string;\r\n}\r\n\r\nconst Input: React.FC<Props> = ({ add, label, labelColor }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const submit = (): void => {\r\n        if (!inputValue) alert(\"Input field cannot be empty.\")\r\n        add(inputValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <div style={{ backgroundColor: labelColor }}>{label}</div>\r\n            <input type=\"text\" value={inputValue} onChange={e => setInputValue(e.target.value)} />\r\n            <button onClick={submit}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n    participant: string,\r\n    deleteFunction: (participant: string) => void\r\n}\r\n\r\nconst Participant: React.FC<Props> = ({ participant, deleteFunction }) => {\r\n    return (\r\n        <div className=\"participant\">\r\n            <h3>{participant}</h3>\r\n            <div onClick={() => deleteFunction(participant)}>\r\n                <i className=\"fas fa-trash\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participant\r\n","import React from 'react'\r\nimport Participant from './Participant'\r\n\r\ninterface Props {\r\n    participants: Array<string>,\r\n    deleteFunction: (participant: string) => void\r\n}\r\n\r\nconst Participants: React.FC<Props> = ({ participants, deleteFunction }) => {\r\n    return (\r\n        <div>\r\n            {participants.map(participant => {\r\n                return <Participant participant={participant} deleteFunction={deleteFunction} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participants\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Input from './Components/Input';\nimport Participants from './Components/Participants';\nimport Participant from './Components/Participant';\n\n\nfunction App() {\n  const [players, setPlayers] = useState<string[]>([]);\n  const [roles, setRoles] = useState<string[]>([]);\n\n  const addPlayer = (participant: string) => {\n    if (players.includes(participant)) alert(\"Player already exists.\")\n    else setPlayers([...players, participant])\n  }\n\n  const addRole = (participant: string) => {\n    if (players.includes(participant)) alert(\"Player already exists.\")\n    else setRoles([...roles, participant])\n  }\n\n  const deleteRole = (participant: string) => {\n    setRoles(roles.filter(role => role !== participant))\n  }\n\n  const deletePlayer = (participant: string) => {\n    setPlayers(players.filter(player => player !== participant))\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Mafia</h1>\n      <div className=\"inputs\">\n        <div className=\"roles\">\n          <Input label=\"Role\" add={addRole} labelColor=\"green\" />\n          <Participants participants={roles} deleteFunction={deleteRole} />\n        </div>\n        <div className=\"players\">\n          <Input label=\"Player\" add={addPlayer} labelColor=\"blue\" />\n          <Participants participants={players} deleteFunction={deleteRole} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}